Clam
====

Clam is a language that is designed to give the programmer the tools they need
to get the job done, without getting in their way. It attempts to offer
flexibility everywhere it can, and tries to stay out of the way of the
development process. It exists as nothing more than a tool to accomplish
some task, rather than a lifestyle one must adopt.

Features
--------

* Compiled to x86 assembly
    * This is done terribly, with zero optimizations
    * Transitioning to LLVM would be a wonderful and gigantic effort
* Statically typed
* Simple type inference
* Interfaces, in the style of Go (static duck typing)
* Lambda syntax
* Simple templating
    * Functions and data structures can be templated over one or more types
    * Not a Turing-complete mess, for better or worse
    * Not as powerful as D
    * Also can take in aliases instead of types, which can be considered
      a more literal example of the copy-paste template analogy. This
      allows for passing lambdas to templated functions, like the
      functional functions `filter` and `map`
* Message passing concurrency system, in the style of Go
    * This is N:1 scheduling, not M:N: Sorry, only one OS thread of
      execution
* Tuples
    * Can be created and unpacked with simple syntax
* Functions can return tuples as well as single values
* No exceptions
    * No exceptions
* D-style scope statements
    * Blocks of code whose execution is deferred to the end of function it is
      enclosed within
    * MAYBE: Maybe also could depend on the result of a boolean expression,
      evaluated at the time of potential execution (would require everything
      involved in the expression being valid both in the scope of scope
      statement declaration and potential execution, so probably only things
      valid within the outermost scope of the function)
* Structs, in the style of D
    * Methods can be defined for structs inside the struct body
    * No inheritance
* Sum types, in the style of OCaml
    * Types within each type constructor can be named, for code-as-docs
* Pattern matching
    * Can pattern match on simple values
    * Can pattern match on tuples, with implicit unpacking
    * Can pattern match on type constructors for sum types
    * Can pattern match on arbitrarily complex boolean expressions, making
      match also operate as alternative syntax for complex if-elsif blocks
* Maybe type
* Uniform Function Call Syntax, heavy nod to D
* Optional parentheses for function calls when there are no arguments
* Primitive dynamic arrays that know their length
    * No support for static arrays
* Primitive associative arrays (hash maps), in the style of D
* Primitive sets
    * Set operations are defined:
        * Union over two sets
        * Intersection over two sets
        * Others
* Uniform `in` operator that can check membership within:
    * Dynamic arrays
    * Associative arrays
        * Checks for existence of a key
    * Sets
    * For each, for user-defined data-types they must conform to an `in`
      operator interface, probably some sort of equals() interface
* Reference and constant are the only two function-parameter storage classes
* Post-execution `return` blocks
    * Where regardless of the return statement that executes to return from
      a function, this block is entered, the generated return value is
      available, and any tweaking desired is possible on the return value
* Function pointers
* Closures
* Both style of function pointers are treated as values that can be passed
  around and stored as with any other value type
* MAYBE: Attempt to be at least somewhat compatible with the C ABI, in that
  the effort is minimized to utilize C code. Being able to call C is
  probably not that difficult, but making C able to call Clam code would
  require hand-holding of function signatures to ensure the right thing is
  done, since Clam supports returning tuples
* Simple parametric polymorphism
    * Interfaces can be templated, and so templated code can expect
      an interface to be implemented by some templated type
    * This is leveraged by the compiler to provide an interface for users
      to implement the ability to range over their defined types with
      `foreach` by implementing a templated interface for their types.
    * This is leveraged to provide the user with a way to implement
      the interface expected by the `in` operator
* Assignment is allowed within conditionals for if blocks
    * This means a variable, whose value is dependent on a condition that
      also drives the if statement execution, does not need to erroneously
      live outside of the scope of the if statement just to exist
            if (x: uint = y, x == z)` or `if ((x: uint = y) == z)
* If statements and match statements can be used as expressions if the
  every possible last statement within those statements is written as an
  expression and each expression returns the same type

Keywords and Operators
----------------------

* if
* else if
* else
* match
    * case/when (not decided yet)

            match (myArray[0] as val) {
                case 10:
                    writeln("Ten!");
                case 0 < val < 5:
                    writeln("Is: %d", val);
                default:
                    writeln("Oh well");
            }

* struct

        struct myStruct {
            x: uint;
            y: uint;
            func this (x: uint, y: uint) {
                this.x = x;
                this.y = y;
            }
            func mult(): uint {
                return x * y;
            }
        }

* variant

        variant Maybe(T) {
            | so as maybeType: T;
            | no
        }

* func  `func myFunc(x: uint): (uint, uint) { return (1, 2); }`
* spawn `spawn myFunc(x, y, z);`
* Template instantiation:
    * `!` ("binary") `Maybe!(int)`
* Logical operators:
    * `&&`
    * `||`
    * `!` (unary)
* Comparison operators:
    * `==` `x == y`
    * `<=`
    * `>=`
    * `!=`
    * `in`
* Arithmetic operators:
    * `+` `x + y`
    * `-`
    * `*`
    * `/`
* Assignment operators:
    * `=`  `x = y`
    * `+=`
    * `-=`
    * `*=`
    * `/=`
* Declare and assign, implies type inference:
    * `:=` `x := 2 + 3;`
* Channel operators
    * `<-`  (channel read)  `x = <- myChan`
    * `<-=` (channel write) `myChan <-= x`
* Aggregate data declarations:
    * myDynamicArray: `[]uint`
    * myHashWithStringKeysAndUintValues: `[string]uint`
    * mySet: `<>uint`
* Lambda function syntax:
    * `lamb` , `=>` `lamb x: int, y: int => x + y`
            odds := naturals.filter!(lamb x: int => x % 2 == 1);

Semantics
---------
* Precedence table. Anything on the same line is the same precendence, and
  anything on a line below another line has more precedence than the
  preceeding line. If the following line is indented over from the previous
  line, it is considered part of the previous line:

        ,                         (binop, comma)
        =                         (binop, assignment, right-associative)
        ||                        (binop, logical OR)
        &&                        (binop, logical AND)
        !                         (unary, logical NOT, right-associative)
        <= >= < > == != in        (binop, comparison)
            <|> <&> <^> <-> <in>
        |                         (binop, bitwise OR)
        ^                         (binop, bitwise XOR)
        &                         (binop, bitwise AND)
        << >>                     (binop, bitwise shift)
        + - ~                     (binop, arithmetic sum or concatenate)
        * / %                     (binop, arithmetic mult, div, mod)
        <Literal Value>

    * A literal value is defined as:
        * The result of a `cast()` expression
        * A boolean literal, `true`, `false`
        * The result of an expression in parentheses, `(<expression>)`
        * A literal number, `0`, `56`, `5.1`, `5.`, `.1`
        * The result of a channel read, `<-myChan`
        * The result of evaluating an atom
    * An atom is defined as:
        * The value of a variable identifier, `x`
        * The result of calling a function on an atom, `function(x)`
        * The result of calling a method of an atom, `x.method()`
        * The value of a member of the complex datatype atom, `x.y`
        * The value obtained by indexing into an atom, `x[0]`
    * Indexing into an atom, or slicing into an atom, can involve an
      arbitrarily complex expression, as long as it evaluates to a value
      of the type expected by the sliceable atom
        * Dynamic arrays must be indexed using a `uint`
        * Associative arrays must be indexed using a value of the type used
          as the keys for the associative array
* Set operators:
    * union,                `A <|> B`
        * Yields a set containing all elements from both sets
    * intersection,         `A <&> B`
        * Yields a set containing only the elements contained in both sets
    * anti-intersection,    `A <^> B`
        * Yields a set containing only the elements from each set that are
          not present in both sets
    * difference,           `A <-> B`
        * Yields the subset of A after the intersection of A and B is
          removed from A
    * subset test,          `A <in> B`
        * Yields a boolean value representing whether A is a subset of B.
          To determine if A is a proper subset of B, combine with the `==`
          operator
    * equality,             `A == B`
        * Yields a boolean value representing whether A is equivalent to B
    * inequality,           `A != B`
        * Yields a boolean value representing whether A is not equivalent
          to B
* if

        if (<boolean expression>) {
            [statement]*
        }
        [
        else if (<boolean expression>) {
            [statement]*
        }
        ]*
        [
        else {
            [statement]*
        }
        ]

    * It is possible to declare a new variable inside the conditional
      component, assigning some expression to the new variable. Note that
      assignment binds more loosely than everything except the comma
      operator, so either use the comma operator or use parentheses
      to better communicate intent

            if (x := myFunc(), x == 5) {
                writeln("x [", x, "]");
            }
            else if ((y := myFunc()) == 5) {
                writeln("Not x [", x, "], but y [", y, "]")
            }
            else {
                writeln("Neither of [", x, ", ", y, "]");
            }

* match

        match (<expression> [as <identifier>]) {
            [
            when <expression | boolean expression> ::
                [statement]*
            ]*
            [
            default ::
                [statement]*
            ]
        }

    * Match against the result of some expression. Optionally, bind the result
      of that expression to an identifier with `as` to be able to use the
      result of the expression within the match statement itself (if the match
      is not already over a simple identifier to begin with)

        match (source[0..index] as tok) {
            when "this" ::
                writeln("This!");
            when "that" ::
                writeln("That!");
            when tok in ["the other", "nothing at all"] ::
                writeln("Some!");
            default ::
                writeln("Welp!");
        }

* Assignment is right associative

Examples
--------
