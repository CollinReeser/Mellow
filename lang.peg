Program :: ( Variant
           | StructDef
           | FuncDef
           )+
           ;

Sp :: /\s+/;

StructDef :: #'struct' #Sp Identifier TemplateParamList? StructBody;
StructBody :: #"{" (StructEntry | StructFunction)+ #"}";
StructEntry :: VariableTypePair #";";
StructFunction :: FuncDef;

FuncDef :: #'func' #Sp Identifier FuncDefArgList FuncReturnType FuncBodyBlocks;
FuncDefArgList :: #"(" (FuncSigArg (#"," FuncSigArg)*)? #")";
FuncSigArg :: Identifier #":" ^StorageClass* TypeId;
FuncReturnType :: (#":" (TypeId | TypeTuple))?;
FuncBodyBlocks :: ( BareBlock
                  | (InBlock? OutBlock? ReturnModBlock? BodyBlock)
                  );
InBlock :: #"in" BareBlock;
OutBlock :: #"out" BareBlock;
ReturnModBlock :: #'return' ((#Sp Identifier) | (#"" IdTuple)) BareBlock;
BodyBlock :: #"body" BareBlock;

BareBlock :: #"{" Statement* #"}";

StorageClass :: RefClass
              | ConstClass
              ;
RefClass :: #'ref' #Sp;
ConstClass :: #'const' #Sp;

Variant :: #'variant' #Sp Identifier TemplateParamList? VariantBody;
VariantBody ::  #"{" VariantEntry+ #";"? #"}";
VariantEntry :: #"|" Identifier VariantVarDeclList? #","?;
VariantVarDeclList :: #'is' #Sp VariableTypePair (#"," VariableTypePair)*;

Statement :: BareBlock
           | FuncDef
           | ReturnStmt
           | MatchStmt
           | IfStmt
           | WhileStmt
           | ForStmt
           | ForeachStmt
           | Declaration
           | SpawnStmt
           | YieldStmt
           | ChanWrite
           | ChanReadStmt
           | DeclTypeInfer
           | ExprStmt
           ;

ReturnStmt :: #'return' #Sp Expr #";";

IfStmt :: #"if" #"(" BoolExpr #")" BareBlock (ElseIfStmt)* ElseStmt?;
ElseIfStmt :: #'else' #Sp #"if" #"(" BoolExpr #")" BareBlock;
ElseStmt :: #"else" BareBlock;

WhileStmt :: #"while" #"(" BoolExpr #")" BareBlock;

ForStmt :: #"for" #"(" ForInit BoolExpr #";" Expr #")" #"{" Statement* #"}";
ForInit :: DeclTypeInfer | DeclAssignment | AssignmentStmt;

ForeachStmt :: #"foreach" #"(" (Foreach2 | Foreach1) #";" Expr #")" #"{" Statement* #"}";
Foreach1 :: Identifier;
Foreach2 :: Identifier #"," Identifier;

DeclAssignment :: VariableTypePair #"=" Expr #";";
DeclTypeInfer :: Identifier #":=" Expr #";";
AssignmentStmt :: Identifier #"=" Expr #";";

Declaration :: VariableTypePair #";";

SpawnStmt :: #'spawn' #Sp FuncCall #";";

YieldStmt :: #'yield' #Sp #";";

ChanWrite :: Identifier #"<-=" Expr #";";

ChanReadStmt :: Identifier ChanRead #";";

FuncCallComplex :: MemberAccesses? FuncCall;
FuncCall :: Identifier #"(" (Expr (#"," Expr)*)? #")";
MemberAccesses :: MemberAccess+;
MemberAccess :: (FuncCall | Number | Identifier | ParenExpr) #".";

BoolExpr :: TrueExpr | FalseExpr | Expr;
TrueExpr :: #"true";
FalseExpr :: #"false";

ParenExpr :: #"(" Expr #")";
ExprStmt :: Expr #";";
Expr :: FuncCallComplex
      | ChanRead
      | Sum
      ;

MatchStmt :: #"match" #"(" Expr #")" #"{" MatchCase+ #"}";
MatchCase :: ( MatchIs
             | StringMatch
             | ^RangeMatch
             | CharMatch
             | NumMatch
             ) #":" Statement;
RangeMatch :: NumRangeMatch
            | CharRangeMatch
            ;
MatchIs :: Identifier (#'is' #Sp #"(" Identifier (#"," Identifier)* #")")?;
CharMatch :: CharLit;
StringMatch :: StringLit;
NumMatch :: Number;
NumRangeMatch :: Number #".." Number;
CharRangeMatch :: CharLit #".." CharLit;

VariableTypePair :: Identifier #":" TypeId;

ChanRead :: #"<-" Identifier;

Sum :: Product (SumOp Product)*;
Product :: Value (MulOp Value)*;
Value :: Number
       | Identifier
       | ParenExpr
       ;

SumOp :: /[+-]/;
MulOp :: /[*\/%]/;

Number :: FloatNum | IntNum;
CharLit :: /'(?:\\n|\\t|\\r|[^\\])'/;
StringLit :: /"(?:\\.|[^"\\])*"/;
IntNum :: /-?[1-9][0-9]*|0/;
FloatNum :: /-?[0-9]+\.[0-9]+/;

Identifier :: /[a-zA-Z_][a-zA-Z0-9_]*/;
IdTuple :: #"(" Identifier (#"," Identifier)* #")";

TypeId :: ChanType
        | BasicType
        | ArrayType
        | SetType
        | HashType
        | UserType
        ;
ChanType :: #"chan" TemplateInstantiation;
ArrayType :: (PointerDecl | DynArrayDecl) TypeId;
PointerDecl :: #"*";
DynArrayDecl :: #"[" #"]";
SetType :: #"<" #">" BasicType;
HashType :: #"[" BasicType #"]" TypeId;
TypeTuple :: #"(" TypeId (#"," TypeId)* #")";
UserType :: Identifier TemplateInstantiation?;
BasicType :: "long"
           | "int"
           | "short"
           | "byte"
           | "float"
           | "double"
           | "char"
           | "bool"
           | "string"
           ;

TemplateInstantiation :: #"!" TemplateParam;
TemplateParam :: TemplateParamList | TypeId;
TemplateParamList :: #"(" TypeId (#"," TypeId)* #")";
