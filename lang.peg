Program :: ( VariantDef
           | StructDef
           | FuncDef
           | ExternStructDecl
           | ExternFuncDecl
           | InterfaceDef
           )+
           ;

Sp :: /\s+/;

ExternStructDecl :: #'extern' #Sp #'struct' #Sp Identifier #";";
ExternFuncDecl   :: #'extern' #Sp #'func'   #Sp Identifier
                    FuncDefArgList FuncReturnType #";";

StructDef :: #'struct' #Sp Identifier TemplateTypeParams StructBody;
StructBody :: #"{" (StructEntry | StructFunction)+ #"}";
StructEntry :: VariableTypePair #";";
StructFunction :: FuncDef;

FuncDef :: FuncSignature FuncBodyBlocks;
FuncSignature :: #'func' #Sp Identifier TemplateTypeParams FuncDefArgList FuncReturnType;
FuncDefArgList :: #"(" (FuncSigArg (#"," FuncSigArg)*)? #")";
FuncSigArg :: Identifier #":" ^StorageClass* TypeId;
FuncReturnType :: (#":" (TypeId | TypeTuple))?;
FuncBodyBlocks :: ( BareBlock
                  | (InBlock? OutBlock? ReturnModBlock? BodyBlock)
                  );
InBlock :: #"in" BareBlock;
OutBlock :: #"out" BareBlock;
ReturnModBlock :: #'return' ((#Sp Identifier) | (#"" IdTuple))? BareBlock;
BodyBlock :: #"body" BareBlock;

BareBlock :: #"{" Statement* #"}";

StorageClass :: ConstClass;
ConstClass :: #'const' #Sp;

VariantDef :: #'variant' #Sp Identifier TemplateTypeParams VariantBody;
VariantBody ::  #"{" VariantEntry+ #"}";
VariantEntry :: Identifier TypeTuple? #","?;

InterfaceDef :: #'interface' #Sp Identifier TemplateTypeParams InterfaceBody;
InterfaceBody :: #"{" InterfaceEntry+ #"}";
InterfaceEntry :: FuncSignature #";";

Statement :: BareBlock
           | FuncDef
           | (ReturnStmt #";")
           | IfStmt
           | WhileStmt
           | ForStmt
           | ForeachStmt
           | MatchStmt
           | (Declaration #";")
           | (AssignExisting #";")
           | (SpawnStmt #";")
           | (YieldStmt #";")
           | (ChanWrite #";")
           | (FuncCall #";")
           ;

ReturnStmt :: #'return' (#Sp BoolExpr)?;

IfStmt :: #"if" #"(" CondAssignments BoolExpr #")" BareBlock ElseIfs ElseStmt;
ElseIfs :: ElseIfStmt*;
ElseIfStmt :: #'else' #Sp #"if" #"(" BoolExpr #")" BareBlock;
ElseStmt :: (#"else" BareBlock)?;

WhileStmt :: #"while" #"(" CondAssignments BoolExpr #")" BareBlock;

ForStmt :: #"for" #"(" ForInit ForConditional ForPostExpression #")"
           BareBlock
           ;
ForInit :: Assignment? #";";
ForConditional :: BoolExpr? #";";
ForPostExpression :: BoolExpr?;

ForeachStmt :: #"foreach" #"(" ForeachArgs #";" BoolExpr #")"
               BareBlock
               ;
ForeachArgs :: Identifier (#"," Identifier)*;

Declaration :: DeclAssignment | DeclTypeInfer | VariableTypePair;

SpawnStmt :: #'spawn' #Sp Identifier FuncCallTrailer;

YieldStmt :: #'yield' #Sp?;

ChanWrite :: BoolExpr #"<-=" BoolExpr;

FuncCall :: Identifier FuncCallArgList;




DeclAssignment :: (VariableTypePairTuple | VariableTypePair) #"=" BoolExpr;
DeclTypeInfer :: (IdTuple | Identifier) #":=" BoolExpr;
AssignExisting :: LorRValue ^AssignExistingOp BoolExpr;
AssignExistingOp :: "="
                  | "+="
                  | "-="
                  | "/="
                  | "*="
                  | "%="
                  | "~="
                  ;
LorRValue :: Identifier LorRTrailer?;
LorRTrailer :: LorRMemberAccess
             | (Slicing LorRTrailer?)
             ;
LorRMemberAccess :: #"." LorRValue;
Assignment :: DeclAssignment | DeclTypeInfer | AssignExisting;
CondAssignments :: CondAssign*;
CondAssign :: Assignment #";";







BoolExpr :: OrTest;
OrTest :: AndTest (#"||" AndTest)*;
AndTest :: NotTest (#"&&" NotTest)*;
NotTest :: (#"!" NotTest) | Comparison;
Comparison :: Expr (^CompOp Expr)?;
CompOp :: "<="
        | ">="
        | ('<' #Sp)
        | ('>' #Sp)
        | "=="
        | "!="
        | "<in>"
        | ('in' #Sp)
        ;
Expr :: OrExpr;
OrExpr :: XorExpr (#"|" XorExpr)*;
XorExpr :: AndExpr (#"^" AndExpr)*;
AndExpr :: ShiftExpr (#"&" ShiftExpr)*;
ShiftExpr :: SumExpr (("<<" | ">>") SumExpr)*;
SumExpr :: ProductExpr (^SumOp ProductExpr)*;
SumOp :: "+"
       | "-"
       | "~"
       | "<|>"
       | "<&>"
       | "<^>"
       | "<->"
       ;
ProductExpr :: Value (("*" | "/" | "%") Value)*;
Value :: (BooleanLiteral DotAccess?)
       | Lambda
       | (CharLit DotAccess?)
       | (StringLit DotAccess?)
       | (ValueTuple DotAccess?)
       | (ParenExpr DotAccess?)
       | (ArrayLiteral DotAccess?)
       | (Number DotAccess?)
       | (ChanRead DotAccess?)
       | (Identifier Trailer?)
       | SliceLengthSentinel
       ;

BooleanLiteral :: ("true")
                | ("false")
                ;

Lambda :: #"fn" LambdaArgs #"=>" BoolExpr;
LambdaArgs :: #"(" (VariableTypePair (#"," VariableTypePair)*)? #")";

ValueTuple :: #"(" BoolExpr (#"," BoolExpr)+ #")";

ParenExpr :: #"(" BoolExpr #")";

ArrayLiteral :: #"[" Value (#"," Value)* #"]";

Number :: FloatNum | IntNum;
CharLit :: /'(?:\\.|[^'\\])'/;
StringLit :: (/"(?:\\.|[^"\\])*"/ | /\x60(?:[^\x60]*)\x60/)+;
IntNum :: /-?[1-9][0-9]*|0/;
FloatNum :: /-?[0-9]+\.[0-9]+/;

SliceLengthSentinel :: #"$";

ChanRead :: #"<-" BoolExpr;

Trailer :: DynArrAccess
         | TemplateInstanceMaybeTrailer
         | FuncCallTrailer
         | DotAccess
         ;
DynArrAccess :: Slicing Trailer?;
TemplateInstanceMaybeTrailer :: TemplateInstantiation Trailer?;
FuncCallTrailer :: FuncCallArgList Trailer?;
Slicing :: #"["
                ( IndexRange
                | SingleIndex
                )
           #"]"
           ;
SingleIndex :: BoolExpr;
IndexRange :: StartToIndexRange
            | IndexToIndexRange
            | IndexToEndRange
            ;
StartToIndexRange :: #".." BoolExpr;
IndexToEndRange :: BoolExpr #"..";
IndexToIndexRange :: BoolExpr #".." BoolExpr;
FuncCallArgList :: #"(" (BoolExpr (#"," BoolExpr)*)? #")";
DotAccess :: #"." Identifier Trailer?;







MatchStmt :: #"match" #"(" CondAssignments BoolExpr #")" #"{" MatchWhen+ #"}";
MatchWhen :: #'when' #Sp Pattern #"::" Statement*;
Pattern :: DestructVariantPattern
         | StructPattern
         | BoolPattern
         | StringPattern
         | CharPattern
         | FloatPattern
         | IntPattern
         | TuplePattern
         | ArrayPattern
         | ArrayTailPattern
         | WildcardPattern
         | VarOrBareVariantPattern
         ;
DestructVariantPattern  :: Identifier #"(" Pattern (#"," Pattern)* #")";
StructPattern           :: #"{" Identifier #"=" Pattern
                          (#"," Identifier #"=" Pattern)* #"}";
BoolPattern             :: "true" | "false";
StringPattern           :: StringLit;
CharPattern             :: CharLit (#".." CharLit)?;
IntPattern              :: IntNum (#".." IntNum)?;
FloatPattern            :: FloatNum (#".." FloatNum)?;
TuplePattern            :: #"(" Pattern (#"," Pattern)+ #")";
ArrayPattern            :: #"[" Pattern (#"," Pattern)*
                         ( #"," #".." (#'as' #Sp Identifier)? )? #"]";
ArrayTailPattern        :: #"[" #".." (#'as' #Sp Identifier)? #","
                           Pattern (#"," Pattern)* #"]";
WildcardPattern         :: #"_";
VarOrBareVariantPattern :: Identifier;

VariableTypePair :: Identifier #":" TypeId;
VariableTypePairTuple :: #"(" VariableTypePair (#"," VariableTypePair)* #")";

Identifier :: /[a-zA-Z_][a-zA-Z0-9_]*/;
IdTuple :: #"(" Identifier (#"," Identifier)* #")";

TypeId :: ChanType
        | BasicType
        | ArrayType
        | SetType
        | HashType
        | UserType
        ;
ChanType :: #"chan" TemplateInstantiation;
ArrayType :: #"[" #"]" TypeId;
SetType :: #"<" #">" BasicType;
HashType :: #"[" BasicType #"]" TypeId;
TypeTuple :: #"(" TypeId (#"," TypeId)+ #")";
UserType :: Identifier TemplateInstantiation?;
BasicType :: "void"
           | "long"
           | "int"
           | "short"
           | "byte"
           | "float"
           | "double"
           | "char"
           | "bool"
           | "string"
           ;

TemplateInstantiation :: #"!" TemplateParam;
TemplateParam :: TemplateParamList | TypeId;
TemplateParamList :: #"(" TemplateAlias (#"," TemplateAlias)* #")";
TemplateAlias :: Lambda | TypeId;
TemplateTypeParams :: TemplateTypeParamList?;
TemplateTypeParamList :: #"(" Identifier (#"," Identifier)* #")";
