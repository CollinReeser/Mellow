Program :: ( Variant
           | StructDef
           | FuncDef
           )+
           ;

Sp :: /\s+/;

StructDef :: #'struct' #Sp Identifier TemplateTypeParams StructBody;
StructBody :: #"{" (StructEntry | StructFunction)+ #"}";
StructEntry :: VariableTypePair #";";
StructFunction :: FuncDef;

FuncDef :: #'func' #Sp Identifier TemplateTypeParams FuncDefArgList FuncReturnType FuncBodyBlocks;
FuncDefArgList :: #"(" (FuncSigArg (#"," FuncSigArg)*)? #")";
FuncSigArg :: Identifier #":" ^StorageClass* TypeId;
FuncReturnType :: (#":" (TypeId | TypeTuple))?;
FuncBodyBlocks :: ( BareBlock
                  | (InBlock? OutBlock? ReturnModBlock? BodyBlock)
                  );
InBlock :: #"in" BareBlock;
OutBlock :: #"out" BareBlock;
ReturnModBlock :: #'return' ((#Sp Identifier) | (#"" IdTuple)) BareBlock;
BodyBlock :: #"body" BareBlock;

BareBlock :: #"{" Statement* #"}";

StorageClass :: RefClass
              | ConstClass
              ;
RefClass :: #'ref' #Sp;
ConstClass :: #'const' #Sp;

Variant :: #'variant' #Sp Identifier TemplateTypeParams VariantBody;
VariantBody ::  #"{" VariantEntry+ #";"? #"}";
VariantEntry :: #"|" Identifier VariantVarDeclList? #","?;
VariantVarDeclList :: #'is' #Sp VariableTypePair (#"," VariableTypePair)*;

Statement :: BareBlock
           | FuncDef
           | (ReturnStmt #";")
           | MatchStmt
           | IfStmt
           | WhileStmt
           | ForStmt
           | ForeachStmt
           | (Declaration #";")
           | (SpawnStmt #";")
           | (YieldStmt #";")
           | (ChanWrite #";")
           | (ChanReadStmt #";")
           | (DeclAssignment #";")
           | (DeclTypeInfer #";")
           | (AssignmentStmt #";")
           | (ExprStmt #";")
           ;

ReturnStmt :: #'return' #Sp BooleanExpr;

IfStmt :: #"if" #"(" BooleanExpr #")" BareBlock (ElseIfStmt)* ElseStmt?;
ElseIfStmt :: #'else' #Sp #"if" #"(" BooleanExpr #")" BareBlock;
ElseStmt :: #"else" BareBlock;

WhileStmt :: #"while" #"(" BooleanExpr #")" BareBlock;

ForStmt :: #"for" #"(" ForInit #";" BooleanExpr #";" Expr #")" #"{" Statement* #"}";
ForInit :: DeclTypeInfer | DeclAssignment | AssignmentStmt;

ForeachStmt :: #"foreach" #"(" (Foreach2 | Foreach1) #";" Expr #")" #"{" Statement* #"}";
Foreach1 :: Identifier;
Foreach2 :: Identifier #"," Identifier;

DeclAssignment :: VariableTypePair #"=" BooleanExpr;
DeclTypeInfer :: Identifier #":=" BooleanExpr;
AssignmentStmt :: Identifier #"=" BooleanExpr;

Declaration :: VariableTypePair;

SpawnStmt :: #'spawn' #Sp FuncCall;

YieldStmt :: #'yield';

ChanWrite :: Identifier #"<-=" Expr;

ChanReadStmt :: Identifier ChanRead;








BooleanExpr :: BooleanLiteral
             | OrTest
             ;
BooleanLiteral :: ("true" #Sp)
                | ("false" #Sp)
                ;
OrTest :: AndTest (#"||" AndTest)*;
AndTest :: NotTest (#"&&" NotTest)*;
NotTest :: (#"!" NotTest) | ParenBooleanExpr;
ParenBooleanExpr :: (#"(" BooleanExpr #")")
                  | Comparison
                  ;
Comparison :: Expr (^CompOp Expr)*;
CompOp :: "<="
        | ">="
        | "<"
        | ">"
        | "=="
        | "!="
        | ('in' #Sp)
        ;
Expr :: CommaOp;
CommaOp :: OrExpr (#"," OrExpr)*;
OrExpr :: XorExpr (#"|" XorExpr)*;
XorExpr :: AndExpr (#"^" AndExpr)*;
AndExpr :: ShiftExpr (#"&" ShiftExpr)*;
ShiftExpr: SumExpr (("<<" | ">>") SumExpr)*;
SumExpr :: ProductExpr (("+" | "-") ProductExpr)*;
ProductExpr :: Value (("*" | "/" | "%") Value)*;
Value :: ExprCast
       | ParenExpr
       | Number
       | SliceLengthSentinel
       | ChanRead
       | Atom
       ;

ExprCast :: #"cast" #"(" Expr #")";

ParenExpr :: #"(" Expr #")";

Number :: FloatNum | IntNum;
CharLit :: /'(?:\\n|\\t|\\r|[^\\])'/;
StringLit :: /"(?:\\.|[^"\\])*"/;
IntNum :: /-?[1-9][0-9]*|0/;
FloatNum :: /-?[0-9]+\.[0-9]+/;

SliceLengthSentinel :: #"$";

ChanRead :: #"<-" Expr;

Atom :: Identifier Trailer?;
Trailer :: DynArrAccess
         | FuncCall
         | MemberAccess
         ;
DynArrAccess :: Slicing Trailer?;
FuncCall :: FuncCallArgList Trailer?;
MemberAccess :: DotAccess Trailer?;
Slicing :: #"["
                ( SingleIndex
                | IndexRange
                )
           #"]"
           ;
SingleIndex :: Expr;
IndexRange :: StartToIndexRange
            | IndexToEndRange
            | IndexToIndexRange
            ;
StartToIndexRange :: #".." Expr;
IndexToEndRange :: Expr #"..";
IndexToIndexRange :: Expr #".." Expr;
FuncCallArgList :: #"(" (BooleanExpr (#"," BooleanExpr)*)? #")";
DotAccess :: #"." Atom;








MatchStmt :: #"match" #"(" BooleanExpr #")" #"{" MatchCase+ #"}";
MatchCase :: ( MatchIs
             | StringMatch
             | ^RangeMatch
             | CharMatch
             | NumMatch
             ) #":" Statement;
RangeMatch :: NumRangeMatch
            | CharRangeMatch
            ;
MatchIs :: Identifier (#'is' #Sp #"(" Identifier (#"," Identifier)* #")")?;
CharMatch :: CharLit;
StringMatch :: StringLit;
NumMatch :: Number;
NumRangeMatch :: Number #".." Number;
CharRangeMatch :: CharLit #".." CharLit;

VariableTypePair :: Identifier #":" TypeId;

ChanRead :: #"<-" Identifier;

Sum :: Product (SumOp Product)*;
Product :: Value (MulOp Value)*;
Value :: Number
       | Identifier
       | ParenExpr
       ;

Identifier :: /[a-zA-Z_][a-zA-Z0-9_]*/;
IdTuple :: #"(" Identifier (#"," Identifier)* #")";

TypeId :: ChanType
        | BasicType
        | ArrayType
        | SetType
        | HashType
        | UserType
        ;
ChanType :: #"chan" TemplateInstantiation;
ArrayType :: (PointerDecl | DynArrayDecl) TypeId;
PointerDecl :: #"*";
DynArrayDecl :: #"[" #"]";
SetType :: #"<" #">" BasicType;
HashType :: #"[" BasicType #"]" TypeId;
TypeTuple :: #"(" TypeId (#"," TypeId)* #")";
UserType :: Identifier TemplateInstantiation?;
BasicType :: "long"
           | "int"
           | "short"
           | "byte"
           | "float"
           | "double"
           | "char"
           | "bool"
           | "string"
           ;

TemplateInstantiation :: #"!" TemplateParam;
TemplateParam :: TemplateParamList | TypeId;
TemplateParamList :: #"(" TypeId (#"," TypeId)* #")";
TemplateTypeParams :: TemplateTypeParamList?;
TemplateTypeParamList :: #"(" Identifier (#"," Identifier)* #")";
