variant Token {
    LeftBrack,
    RightBrack,
    Plus,
    Minus,
    LeftWakka,
    RightWakka,
    Period,
    Comma
}

variant Expr {
    Loop ([]Expr),
    Inc,
    Dec,
    MoveLeft,
    MoveRight,
    Input,
    Output
}

func intToString(val: int): string {
    if (val < 0) {
        return "-" ~ intToString(val * -1);
    }
    convert := ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    if (val < 10) {
        return convert[val];
    }
    return intToString(val / 10) ~ intToString(val % 10);
}

extern readln(): string;
extern writeln(str: string);
extern write(str: string);

// ++++++++++[-]
// program := [Inc, Inc, Inc, Inc, Inc, Inc, Inc, Inc, Inc, Inc, Loop ([Dec])];

func interpret(program: []Expr) {
    tape := [30000]int;
    i := 0;
    line: string;

    func innerInterpret(seq: []Expr) {
        foreach (expr; seq) {
            match (expr) {
            when Inc ::
                tape[i] += 1;
            when Dec ::
                tape[i] -= 1;
            when MoveLeft ::
                i -= 1;
                if (i < 0)
                {
                    i = len(tape);
                }
            when MoveRight :: i += 1;
                if (i >= len(tape))
                {
                    i = 0;
                }
            when Input ::
                if (len(line) <= 0)
                {
                    line = readln();
                }
                tape[i] = line[0];
                line = line[1..$];
            when Output ::
                write(intToString(tape[i]));
            when Loop (inner) ::
                while (tape[i] != 0)
                {
                    innerIntepret(inner);
                }
            }
        }
    }

    innerInterpret(program);
}
